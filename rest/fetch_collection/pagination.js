/**
 * In this example, 100 products have been created. To fetch them, run:

 curl http://localhost:4000/products

 * Note that only 10 have been returned. A default limit of 10 has been set.
 *
 * To set another limit, use:

 curl http://localhost:4000/products?limit=20

 * The default offset is 0. To specify it:

 curl "http://localhost:4000/products?limit=20&offset=30"

  * To see the `WebLinks` generated by this example, see the `Link` header after running:

  curl -v "http://localhost:4000/products?limit=20&offset=30"

*/

const port = 4000;
const app = require('express')();
const bodyParser = require('body-parser')
let counter = 0;

var products = [];
do {
    products.push({title: `Product ${counter++}`})
} while (counter < 100);

app.use(bodyParser.json()) // for parsing application/json
app
    // Return 200 when found or 404 when not found:
    .get('/products/:id', (req, res) => req.params.id in products ?
        res.format({
            'application/json': () => res.json(products[req.params.id])
        }) :
        res.sendStatus(404)
    )
    .get('/products', (req, res) => res.format({'application/json': () => {
        // If undefined, we will limit to 10, and up to 20 will be accepted
        const limit = Math.min(20, parseInt(req.query.limit)) || 10;
        // If undefined, offset/cursor is 0
        const offset = parseInt(req.query.offset) || 0;
        res.set('Link', getPaginationLinks('/products', offset, limit, products.length).join(', '))
        res.json(products.slice(offset, offset + limit));
    }}));

app.listen(port, () => console.log(`Running a REST server at http://localhost:${port}/`));

// This method generates the `Web Links` to be consumed by clients:
function getPaginationLinks(uri, offset, limit, total) {
    function buildLink(rel, newOffset, newLimit) {
        return `<http://localhost:${port}${uri}?offset=${newOffset}&limit=${newLimit}>; rel="${rel}"`;
    }
    let links = [];
    if ((offset + limit) < total) {
        links.push(buildLink('next', offset + limit, limit));
    }
    links.push(buildLink('last', total - limit, limit));
    links.push(buildLink('first', 0, limit));
    if (offset > 0) {
        const prevLimit = limit + Math.min(0, offset - limit);
        links.push(buildLink('prev', offset - prevLimit, prevLimit));
    }
    return links;
}
